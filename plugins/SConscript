import sys, os, string

platform = sys.platform

try:
    geckosdk = os.environ['GECKO_SDK']
    if geckosdk[-1] != os.sep: geckosdk += os.sep
except:
    print "Please set environment variable GECKO_SDK first."
    sys.exit(1)

# Create two builders to create xpt and header files from idl.
bxpt = Builder(action = 'xpidl -w -m typelib -Icomponents -I' + geckosdk + 'idl -e $TARGET $SOURCE', suffix = '.xpt', src_suffix = '.idl')
bhdr = Builder(action = 'xpidl -w -m header -Icomponents -I' + geckosdk + 'idl -e $TARGET $SOURCE', suffix = '.h', src_suffix = '.idl')

# Create environment object for build
env = Environment(
    CPPPATH = [geckosdk + 'include'],
    LIBPATH = [geckosdk + 'lib'],
    LIBS = ['xpcom', 'xpcomglue_s', 'nspr4', 'plds4', 'plc4'],
    ENV = os.environ)
env.AppendENVPath('PATH', geckosdk + 'bin')
env.Append(BUILDERS = {'MozXPT' : bxpt, 'MozHeader' : bhdr })

# Add additional param for different platforms
if platform == 'linux2':
    env.ParseConfig('pkg-config --libs --cflags gtk+-2.0')
    env.AppendUnique(
        CXXFLAGS = ['-include', 'mozilla-config.h',
                    '-Wall', '-O2',
                    '-fno-rtti', '-fno-exceptions',
                    '-Wconversion',
                    '-Wpointer-arith',
                    '-Wcast-align',
                    '-Woverloaded-virtual',
                    '-Wsynth',
                    '-Wno-ctor-dtor-privacy',
                    '-Wno-non-virtual-dtor',
                    '-Wno-long-long',
                    '-pedantic',
                    '-fshort-wchar',
                    '-pthread', '-pipe', '-DATLINUX'],
        CPPPATH = ['#plugins/include'])

# Create headers and xpt files from idl
xpts = [env.MozXPT('nsITray')]
headers = [env.MozHeader('nsITray')]

parts = []
parts.extend(SConscript('common/SConscript', 'env'))
if platform == 'linux2':
    parts.extend(['nsScriptablePeer.cpp', 'plugin.cpp'])
nptray = env.SharedLibrary('nptray', parts)

Default([xpts, headers, nptray])
